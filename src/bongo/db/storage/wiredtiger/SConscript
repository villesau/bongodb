# -*- mode: python -*-
Import("env")
Import("wiredtiger")
Import("get_option")

env = env.Clone()

using_ubsan = False
sanitizer_list = get_option('sanitize')
if sanitizer_list:
    using_ubsan = 'undefined' in sanitizer_list.split(',')

env.Library(
    target='storage_wiredtiger_customization_hooks',
    source= [
        'wiredtiger_customization_hooks.cpp',
        'wiredtiger_extensions.cpp',
    ],
    LIBDEPS= ['$BUILD_DIR/bongo/base',
              '$BUILD_DIR/bongo/db/service_context'],
    PROGDEPS_DEPENDENTS=[
        '$BUILD_DIR/bongo/bongod',
        '$BUILD_DIR/bongo/bongos',
    ],
)

if wiredtiger:
    wtEnv = env.Clone()
    wtEnv.InjectThirdPartyIncludePaths(libraries=['wiredtiger'])
    wtEnv.InjectThirdPartyIncludePaths(libraries=['zlib'])
    wtEnv.InjectThirdPartyIncludePaths(libraries=['valgrind'])

    # This is the smallest possible set of files that wraps WT
    wtEnv.Library(
        target='storage_wiredtiger_core',
        source= [
            'wiredtiger_global_options.cpp',
            'wiredtiger_index.cpp',
            'wiredtiger_kv_engine.cpp',
            'wiredtiger_record_store.cpp',
            'wiredtiger_recovery_unit.cpp',
            'wiredtiger_session_cache.cpp',
            'wiredtiger_snapshot_manager.cpp',
            'wiredtiger_size_storer.cpp',
            'wiredtiger_util.cpp',
            ],
        LIBDEPS= [
            'storage_wiredtiger_customization_hooks',
            '$BUILD_DIR/bongo/base',
            '$BUILD_DIR/bongo/db/bson/dotted_path_support',
            '$BUILD_DIR/bongo/db/catalog/collection_options',
            '$BUILD_DIR/bongo/db/concurrency/lock_manager',
            '$BUILD_DIR/bongo/db/concurrency/write_conflict_exception',
            '$BUILD_DIR/bongo/db/index/index_descriptor',
            '$BUILD_DIR/bongo/db/namespace_string',
            '$BUILD_DIR/bongo/db/service_context',
            '$BUILD_DIR/bongo/db/storage/index_entry_comparison',
            '$BUILD_DIR/bongo/db/storage/journal_listener',
            '$BUILD_DIR/bongo/db/storage/key_string',
            '$BUILD_DIR/bongo/db/storage/oplog_hack',
            '$BUILD_DIR/bongo/db/storage/storage_options',
            '$BUILD_DIR/bongo/util/concurrency/ticketholder',
            '$BUILD_DIR/bongo/util/elapsed_tracker',
            '$BUILD_DIR/bongo/util/processinfo',
            '$BUILD_DIR/third_party/shim_wiredtiger',
            '$BUILD_DIR/third_party/shim_snappy',
            '$BUILD_DIR/third_party/shim_zlib',
            ],
        )

    wtEnv.Library(
        target='storage_wiredtiger',
        source=[
            'wiredtiger_init.cpp',
            'wiredtiger_options_init.cpp',
            'wiredtiger_parameters.cpp',
            'wiredtiger_record_store_bongod.cpp',
            'wiredtiger_server_status.cpp',
            ],
        LIBDEPS=['storage_wiredtiger_core',
                 'storage_wiredtiger_customization_hooks',
                 '$BUILD_DIR/bongo/db/db_raii',
                 '$BUILD_DIR/bongo/db/storage/kv/kv_engine',
                 '$BUILD_DIR/bongo/db/storage/storage_engine_lock_file',
                 '$BUILD_DIR/bongo/db/storage/storage_engine_metadata',
                 ],
        )

    wtEnv.Library(
        target='storage_wiredtiger_mock',
        source=[
            'wiredtiger_record_store_mock.cpp',
            ],
        LIBDEPS=['storage_wiredtiger_core',
             ]
        )

    wtEnv.CppUnitTest(
        target='storage_wiredtiger_init_test',
        source=['wiredtiger_init_test.cpp',
                ],
        LIBDEPS=[
            '$BUILD_DIR/bongo/db/serveronly',
            ],
        )

    # All of these tests fail to compile under undefined behavior
    # sanitizer due to unexpressed circular dependency edges. In particualr
    # they all need a definition from the 'catalog'.
    if not using_ubsan:
        wtEnv.CppUnitTest(
            target='storage_wiredtiger_record_store_test',
            source=['wiredtiger_record_store_test.cpp',
                    ],
            LIBDEPS=[
                'storage_wiredtiger_mock',
                '$BUILD_DIR/bongo/db/storage/record_store_test_harness',
                ],
            )

        wtEnv.CppUnitTest(
            target='storage_wiredtiger_index_test',
            source=['wiredtiger_index_test.cpp',
                    ],
            LIBDEPS=[
                'storage_wiredtiger_mock',
                '$BUILD_DIR/bongo/db/storage/sorted_data_interface_test_harness',
                ],
            )

        wtEnv.CppUnitTest(
            target='storage_wiredtiger_kv_engine_test',
            source=['wiredtiger_kv_engine_test.cpp',
                    ],
            LIBDEPS=[
                'storage_wiredtiger_mock',
                '$BUILD_DIR/bongo/db/storage/kv/kv_engine_test_harness',
                ],
            )

        wtEnv.CppUnitTest(
            target='storage_wiredtiger_util_test',
            source=['wiredtiger_util_test.cpp',
                    ],
            LIBDEPS=[
                '$BUILD_DIR/bongo/db/service_context',
                'storage_wiredtiger_mock',
                ],
            )
